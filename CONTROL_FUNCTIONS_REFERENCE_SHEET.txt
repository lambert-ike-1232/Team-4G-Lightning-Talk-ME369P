╔════════════════════════════════════════════════════════════════════════════╗
║         PYTHON CONTROL LIBRARY — QUICK REFERENCE FOR PRESENTATION          ║
╚════════════════════════════════════════════════════════════════════════════╝


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 1️⃣  ctrl.tf() — TRANSFER FUNCTION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  📌 What:     Creates a linear system from numerator & denominator coefficients
  
  🎯 Purpose:  Represents physical systems mathematically (plant, controller)
  
  💡 Simple:   "A recipe that describes how a system responds to inputs"
  
  📝 Code:     G = ctrl.tf([1], [1, 1, 0])
               # Creates: G(s) = 1 / (s² + s)
  
  ✅ Why:      Lets you work with systems without manually coding all the math


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 2️⃣  ctrl.feedback() — CLOSED-LOOP FEEDBACK
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  📌 What:     Connects controller & plant into a closed-loop system
  
  🎯 Purpose:  Implements feedback control (error correction)
  
  💡 Simple:   "Closes the loop so the system can automatically fix its mistakes"
  
  📝 Code:     T = ctrl.feedback(C * G, 1)
               # Creates: T(s) = (C·G) / (1 + C·G)
  
  ✅ Why:      This is the HEART of feedback control — without it, no correction!


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 3️⃣  ctrl.forced_response() — TIME-DOMAIN SIMULATION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  📌 What:     Simulates system response over time to a given input
  
  🎯 Purpose:  Shows how the system behaves (verify controller works)
  
  💡 Simple:   "A time machine for your control system — see what happens second-by-second"
  
  📝 Code:     t_out, y_out = ctrl.forced_response(T, T=t, U=r)
               # Returns: time points and output values
  
  ✅ Why:      Lets you TEST your PID gains before deploying to real hardware


╔════════════════════════════════════════════════════════════════════════════╗
║                          WORKFLOW DIAGRAM                                  ║
╚════════════════════════════════════════════════════════════════════════════╝

    ┌─────────────────────────────────────────────────────────────────┐
    │  Step 1: Define Plant                                           │
    │  G = ctrl.tf([1], [1, 1, 0])                                    │
    │  ↓                                                              │
    │  Step 2: Define Controller                                      │
    │  C = ctrl.tf([Kd, Kp, Ki], [1, 0])                              │
    │  ↓                                                              │
    │  Step 3: Close the Loop                                         │
    │  T = ctrl.feedback(C * G, 1)                                    │
    │  ↓                                                              │
    │  Step 4: Simulate Response                                      │
    │  t_out, y_out = ctrl.forced_response(T, T=t, U=r)               │
    │  ↓                                                              │
    │  Step 5: Plot & Analyze                                         │
    │  plt.plot(t, r, label='Reference')                              │
    │  plt.plot(t_out, y_out, label='Output')                         │
    └─────────────────────────────────────────────────────────────────┘


╔════════════════════════════════════════════════════════════════════════════╗
║                        COMPARISON TABLE                                    ║
╚════════════════════════════════════════════════════════════════════════════╝

┌──────────────────┬──────────────────────┬──────────────────┬──────────────┐
│ Function         │ Takes In             │ Gives Back       │ Used For     │
├──────────────────┼──────────────────────┼──────────────────┼──────────────┤
│ ctrl.tf()        │ Numerator &          │ System object    │ Building     │
│                  │ denominator lists    │                  │ systems      │
├──────────────────┼──────────────────────┼──────────────────┼──────────────┤
│ ctrl.feedback()  │ System & feedback    │ Closed-loop      │ Creating     │
│                  │ gain                 │ system object    │ feedback     │
├──────────────────┼──────────────────────┼──────────────────┼──────────────┤
│ ctrl.forced_     │ System, time vector, │ Time array &     │ Testing &    │
│ response()       │ input signal         │ output array     │ verifying    │
└──────────────────┴──────────────────────┴──────────────────┴──────────────┘


╔════════════════════════════════════════════════════════════════════════════╗
║                         KEY TAKEAWAY                                       ║
╚════════════════════════════════════════════════════════════════════════════╝

  These 3 functions form the COMPLETE WORKFLOW for control system design:

    🔧 ctrl.tf()               →  Build the system
    🔄 ctrl.feedback()         →  Add feedback control
    ⏱️  ctrl.forced_response() →  Test and verify

  That's all you need to simulate a PID controller! 🎯


